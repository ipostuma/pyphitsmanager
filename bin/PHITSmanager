#!python

import sys, argparse, string
from os import path, makedirs, getcwd
from PHITSmanager import m

def initManager(args):
    m.initCreateDir(path.join(getcwd(),path.basename(args.PATH[0])))
    print "\n\033[1;34mPHITSmanager generated the project\033[1;32m %s\033[0m\n" % (path.basename(args.PATH[0]))

def cpManager(args):
    r=m.cpPHITSproject(path.abspath(args.PATH[0]))
    if r==0:
        print "\n\033[1;34mPHITSmanager cp worked correctly: \033[1;32m %s -> %s \033[0m\n" % (path.abspath(args.PATH[0]),getcwd())

def buildManager(args):
    r=0
    filename="phits.inp"
    if args.f is not None:
        filename=args.f[0]
    if args.d is not None:
        r,filename=m.buildPHITSproject(args.d[0],outputfile=filename)
    else:
        r,filemane=m.buildPHITSproject(outputfile=filename)
    if r==0:
        print "\n\033[1;34mPHITSmanager build successful: \033[1;32m %s created \033[0m\n" % (filename)

def main():
    """
    PHITS file project Manager:\n
    This program aims to help developing and managing an PHITS simulation
    """
    parser = argparse.ArgumentParser(description=main.__doc__,
             epilog="Homepage: website to be defined")
    subparsers = parser.add_subparsers(title='subcommands',
                                        description='valid subcommands',
                                        help='additional help')

    parser_init = subparsers.add_parser('init' ,help='PHITS project directory initialization')
    parser_init.add_argument('PATH', type=str, help='Name of the PHITS project you want to create',nargs=1)
    parser_init.set_defaults(func=initManager)

    parser_init = subparsers.add_parser('cp' ,help='Copy modules from an existing project')
    parser_init.add_argument('PATH', type=str, help='Give the path to the project you want to copy',nargs=1)
    parser_init.set_defaults(func=cpManager)

    parser_build = subparsers.add_parser('build' , help='PHITSmanager build')
    #parser_build.add_argument('', type=str, help='Build MCNP input file',nargs=1)
    parser_build.add_argument('-d', type=str, help='Give the PATH of the PHITSmanager project',nargs=1)
    parser_build.add_argument('-f', type=str, help='Give the FILENAME of the output',nargs=1)
    parser_build.set_defaults(func=buildManager)

    arguments = parser.parse_args()
    arguments.func(arguments)

if __name__ == "__main__":
    sys.exit(main())
